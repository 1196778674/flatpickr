<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on flatpickr</title>
    <link>https://chmln.github.io/flatpickr/index.xml</link>
    <description>Recent content in Introduction on flatpickr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Thu, 02 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://chmln.github.io/flatpickr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started</title>
      <link>https://chmln.github.io/flatpickr/getting-started/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/getting-started/</guid>
      <description>

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;h3 id=&#34;installing-a-flatpickr-module&#34;&gt;Installing a flatpickr module&lt;/h3&gt;

&lt;p&gt;flatpickr is available on npm and bower. Use either one to easily stay up to date with new features and (inevitably) bugfixes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# using npm install
npm i flatpickr --save

# bower
bower install flatpickr-calendar --save

# or, if you like yarn better
yarn add flatpickr
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;non-module-environments&#34;&gt;Non-module environments&lt;/h3&gt;

&lt;p&gt;If, for any reason, you are constained to a non-module environment (e.g. no bundlers such as webpack) - don&amp;rsquo;t fret. I suggest simply pulling the latest version of &lt;code&gt;flatpickr&lt;/code&gt; from &lt;code&gt;unpkg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/flatpickr/dist/flatpickr.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/flatpickr&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;using-the-flatpickr-module&#34;&gt;Using the flatpickr &lt;strong&gt;module&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This is the recommended method if you can &lt;code&gt;require&lt;/code&gt; packages on front end&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Flatpickr = require(&amp;quot;flatpickr&amp;quot;);
new Flatpickr(element, optional_config);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;element&lt;/code&gt; is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Element&#34;&gt;node&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Configuration is optional and passed in an object&lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;non-module-environments-1&#34;&gt;Non-module environments&lt;/h3&gt;

&lt;p&gt;The above syntax works just as well for non-module environments. Make sure the flatpickr&amp;rsquo;s script is included, and the &lt;code&gt;Flatpickr&lt;/code&gt; variable will be available.&lt;/p&gt;

&lt;p&gt;Additionally, flatpickr registers a helper function to make invocation easier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;flatpickr(&amp;quot;.mySelector&amp;quot;, optional_config);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jquery&#34;&gt;jQuery&lt;/h3&gt;

&lt;p&gt;If you have jQuery, flatpickr is available as a plugin.
Simply&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$(&amp;quot;.selector&amp;quot;).flatpickr(optional_config);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://chmln.github.io/flatpickr/examples/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/examples/</guid>
      <description>

&lt;p&gt;Unless otherwise specified, the markup for examples below consists of just an input element, and flatpickr &lt;a href=&#34;https://chmln.github.io/flatpickr/getting-started/#usage&#34;&gt;invocation&lt;/a&gt; with a given config.&lt;/p&gt;

&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;flatpickr&lt;/code&gt; without any config. Some features right off the bat:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The year is scrollable and can be typed in&lt;/li&gt;
&lt;li&gt;The month name is scrollable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;datetime&#34;&gt;DateTime&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    enableTime: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;datetime&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;human-friendly-dates&#34;&gt;Human-friendly Dates&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;altInput&lt;/code&gt; hides your original input and creates a new one.&lt;/p&gt;

&lt;p&gt;Upon date selection, the original input will contain a &lt;code&gt;Y-m-d...&lt;/code&gt; string, while the &lt;code&gt;altInput&lt;/code&gt; will display the date in a more legible, customizable format.&lt;/p&gt;

&lt;p&gt;Enabling this option is highly recommended.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    altInput: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;altinput&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;supplying-dates-for-flatpickr&#34;&gt;Supplying Dates for flatpickr&lt;/h2&gt;

&lt;p&gt;flatpickr has numerous options that accept date values in a variety of formats. Those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;defaultDate&lt;/li&gt;
&lt;li&gt;minDate&lt;/li&gt;
&lt;li&gt;maxDate&lt;/li&gt;
&lt;li&gt;enable/disable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The values accepted by these options all follow the same guidelines.&lt;/p&gt;

&lt;p&gt;You may specify those dates in a variety of formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date&#34;&gt;Date Objects&lt;/a&gt; are always accepted

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new Date(2015, 0, 10)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time&#34;&gt;Timestamps&lt;/a&gt; are always accepted

&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;1488136398547&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ISO Date Strings are always accepted

&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;&amp;quot;2017-02-26T19:40:03.243Z&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Date Strings, which &lt;strong&gt;must match the &lt;code&gt;dateFormat&lt;/code&gt;&lt;/strong&gt; chronologically&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dateFormat&lt;/code&gt; defaults to &lt;code&gt;YYYY-MM-DD HH:MM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This means that &lt;code&gt;&amp;quot;2016&amp;quot;&lt;/code&gt; &lt;code&gt;&amp;quot;2016-10&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;2016-10-20&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;2016-10-20 15&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;2016-10-20 15:30&amp;quot;&lt;/code&gt; are all valid date strings
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The shortcut &lt;code&gt;&amp;quot;today&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preloading-a-date&#34;&gt;Preloading a Date&lt;/h2&gt;

&lt;p&gt;The selected date will get parsed from the input&amp;rsquo;s value or the &lt;code&gt;defaultDate&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;#supplying-dates-for-flatpickr&#34;&gt;supplying dates&lt;/a&gt; for valid date examples.&lt;/p&gt;

&lt;h2 id=&#34;mindate-and-maxdate&#34;&gt;minDate and maxDate&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;minDate&lt;/code&gt; option specifies the &lt;strong&gt;minimum/earliest&lt;/strong&gt; date (inclusively) allowed for selection.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;maxDate&lt;/code&gt; option specifies the &lt;strong&gt;maximum/latest&lt;/strong&gt; date (inclusively) allowed for selection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    minDate: &amp;quot;2017-04&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;minDate2017&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    dateFormat: &amp;quot;d.m.Y&amp;quot;,
    maxDate: &amp;quot;15.12.2017&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;maxDateStr&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    minDate: &amp;quot;today&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;minDateToday&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    minDate: &amp;quot;today&amp;quot;,
    maxDate: new Date().fp_incr(14) // 14 days from now
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;minMaxDateTwoWeeks&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;disabling-specific-dates&#34;&gt;Disabling specific dates&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;d like to make certain dates unavailable for selection, there are multiple methods of doing so.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Disabling specific date&lt;/li&gt;
&lt;li&gt;Disabling a date range&lt;/li&gt;
&lt;li&gt;Disabling dates using a function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of those are possible with the &lt;code&gt;disable&lt;/code&gt; option.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1: Disabling specific dates&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;disableSpecific&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    disable: [&amp;quot;2017-03-30&amp;quot;, &amp;quot;2017-05-21&amp;quot;, &amp;quot;2017-06-08&amp;quot;, new Date(2017, 8, 9) ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;2: Disabling range(s) of dates:&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;disableRange&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    disable: [
        {
            from: &amp;quot;2017-04-01&amp;quot;,
            to: &amp;quot;2017-06-01&amp;quot;
        },
        {
            from: &amp;quot;2017-09-01&amp;quot;,
            to: &amp;quot;2017-12-01&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;3: Disabling dates by a function:&lt;/p&gt;

&lt;p&gt;The function takes in a Date object, and should return a boolean value.
If the function returns &lt;code&gt;true&lt;/code&gt;, the date will be disabled.&lt;/p&gt;

&lt;p&gt;This flexibility allows you to use any arbitrary logic to disable dates.&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;disableFunction&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    disable: [
        function(date) {
            // return true to disable

            return (date.getMonth() % 2 === 0 &amp;amp;&amp;amp; date.getDate() &amp;lt; 15);

        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disabling-all-dates-except-select-few&#34;&gt;Disabling all dates except select few&lt;/h2&gt;

&lt;p&gt;This is the &lt;code&gt;enable&lt;/code&gt; option, which takes in an array of date strings, date ranges and functions. Essentially the same as the &lt;code&gt;disable&lt;/code&gt; option above, but reversed.&lt;/p&gt;

&lt;p&gt;1: Enabling specific dates&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;enableSpecific&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    enable: [&amp;quot;2017-03-30&amp;quot;, &amp;quot;2017-05-21&amp;quot;, &amp;quot;2017-06-08&amp;quot;, new Date(2017, 8, 9) ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;2: Enabling range(s) of dates:&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;enableRange&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    enable: [
        {
            from: &amp;quot;2017-04-01&amp;quot;,
            to: &amp;quot;2017-06-01&amp;quot;
        },
        {
            from: &amp;quot;2017-09-01&amp;quot;,
            to: &amp;quot;2017-12-01&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;3: Enabling dates by a function:&lt;/p&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;enableFunction&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    enable: [
        function(date) {
            // return true to enable

            return (date.getMonth() % 2 === 0 &amp;amp;&amp;amp; date.getDate() &amp;lt; 15);

        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;selecting-multiple-dates&#34;&gt;Selecting multiple dates&lt;/h2&gt;

&lt;p&gt;It is possible to select multiple dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    mode: &amp;quot;multiple&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;multiple&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;range-calendar&#34;&gt;Range Calendar&lt;/h2&gt;

&lt;p&gt;Select a range of dates using the range calendar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    mode: &amp;quot;range&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;range&#34;&gt;&lt;/p&gt;

&lt;p&gt;Note that disabled dates (by either &lt;code&gt;minDate&lt;/code&gt;, &lt;code&gt;maxDate&lt;/code&gt;, &lt;code&gt;enable&lt;/code&gt; or &lt;code&gt;disable&lt;/code&gt;) will not be allowed in selections.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    mode: &amp;quot;range&amp;quot;,
    minDate: &amp;quot;today&amp;quot;,
    disable: [
        function(date) {
            // disable every multiple of 8
            return !(date.getDate() % 8);
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;rangeDisable&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;inline-calendar&#34;&gt;Inline Calendar&lt;/h2&gt;

&lt;p&gt;Display the calendar in an always-open state with the &lt;code&gt;inline&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    inline: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;inline&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;display-week-numbers&#34;&gt;Display Week Numbers&lt;/h2&gt;

&lt;p&gt;Enable the &lt;code&gt;weekNumbers&lt;/code&gt; option to display the week number in a column left to the calendar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    weekNumbers: true,
    /*
        optionally, you may override the function that 
        extracts the week numbers from a Date by
        supplying a getWeek function. It takes in a date
        as a parameter and should return a corresponding string
        that you want to appear left of every week.
    */
    getWeek: function(dateObj) {
        // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;weekNumbers&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;flatpickr-external-elements&#34;&gt;flatpickr + external elements&lt;/h2&gt;

&lt;p&gt;flatpickr can parse an input group of textboxes and buttons, common in Bootstrap and other frameworks.&lt;/p&gt;

&lt;p&gt;This permits additional markup, as well as custom elements to trigger the state of the calendar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=flatpickr&amp;gt;
    &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Select Date..&amp;quot; data-input&amp;gt;

    &amp;lt;a class=&amp;quot;input-button&amp;quot; title=&amp;quot;toggle&amp;quot; data-toggle&amp;gt;
        &amp;lt;i class=&amp;quot;icon-calendar&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/a&amp;gt;

    &amp;lt;a class=&amp;quot;input-button&amp;quot; title=&amp;quot;clear&amp;quot; data-clear&amp;gt;
        &amp;lt;i class=&amp;quot;icon-close&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    wrap: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p class=&#34;flatpickr input-group&#34; data-id=&#34;strap&#34;&gt;
    &lt;input type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-input&gt;

    &lt;a class=&#34;input-button&#34; style=&#34;fill:#444&#34; title=&#34;toggle&#34; data-toggle&gt;
        &lt;svg version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; viewBox=&#34;0 0 17 17&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;path d=&#34;M14 2v-1h-3v1h-5v-1h-3v1h-3v15h17v-15h-3zM12 2h1v2h-1v-2zM4 2h1v2h-1v-2zM16 16h-15v-8.921h15v8.921zM1 6.079v-3.079h2v2h3v-2h5v2h3v-2h2v3.079h-15z&#34; fill=&#34;#000000&#34; /&gt;&lt;/svg&gt;
    &lt;/a&gt;

    &lt;a class=&#34;input-button color-danger&#34; title=&#34;clear&#34; data-clear&gt;
        &lt;svg version=&#34;1.1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; viewBox=&#34;0 0 17 17&#34;&gt;&lt;g&gt;&lt;/g&gt;&lt;path d=&#34;M9.207 8.5l6.646 6.646-0.707 0.707-6.646-6.646-6.646 6.646-0.707-0.707 6.646-6.646-6.647-6.646 0.707-0.707 6.647 6.646 6.646-6.646 0.707 0.707-6.646 6.646z&#34; fill=&#34;#000000&#34; /&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Flatpickr Instance</title>
      <link>https://chmln.github.io/flatpickr/instance-methods-properties-elements/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/instance-methods-properties-elements/</guid>
      <description>

&lt;h2 id=&#34;properties&#34;&gt;Properties&lt;/h2&gt;

&lt;h3 id=&#34;selecteddates&#34;&gt;selectedDates&lt;/h3&gt;

&lt;p&gt;The array of selected dates (Date objects).&lt;/p&gt;

&lt;h3 id=&#34;currentyear&#34;&gt;currentYear&lt;/h3&gt;

&lt;p&gt;The year currently displayed on the calendar.&lt;/p&gt;

&lt;h3 id=&#34;currentmonth&#34;&gt;currentMonth&lt;/h3&gt;

&lt;p&gt;The zero-indexed month number (0-11) currently displayed on the calendar.&lt;/p&gt;

&lt;h3 id=&#34;config&#34;&gt;config&lt;/h3&gt;

&lt;p&gt;The configuration object (defaults + user-specified options).&lt;/p&gt;

&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;

&lt;h3 id=&#34;changemonth-monthnum-is-offset-true&#34;&gt;&lt;code&gt;changeMonth(monthNum, is_offset = true)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Changes the current month.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let calendar = new Flatpickr(yourElement, config);
calendar.changeMonth(1); // go a month ahead
calendar.changeMonth(-2); // go two months back

calendar.changeMonth(0, false); // go to January
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;clear&#34;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Resets the selected dates (if any) and clears the input.&lt;/p&gt;

&lt;h3 id=&#34;close&#34;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Closes the calendar.&lt;/p&gt;

&lt;h3 id=&#34;destroy&#34;&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Destroys the Flatpickr instance, cleans up - removes event listeners, restores inputs, etc.&lt;/p&gt;

&lt;h3 id=&#34;formatdate-dateobj-formatstr&#34;&gt;&lt;code&gt;formatDate(dateObj, formatStr)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dateObj&lt;/code&gt; is a Date, and &lt;code&gt;formatStr&lt;/code&gt; is a string consisting of formatting tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Return Value&lt;/strong&gt;
A string representation of&lt;code&gt;dateObj&lt;/code&gt;,  formatted as per &lt;code&gt;formatStr&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;jumptodate-date&#34;&gt;&lt;code&gt;jumpToDate(date)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sets the calendar view to the year and month of&lt;code&gt;date&lt;/code&gt;, which can be a date string, a Date, or nothing.&lt;/p&gt;

&lt;p&gt;If&lt;code&gt;date&lt;/code&gt;is undefined, the view is set to the latest selected date, the &lt;code&gt;minDate&lt;/code&gt;, or today&amp;rsquo;s date&lt;/p&gt;

&lt;h3 id=&#34;open&#34;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Shows/opens the calendar.&lt;/p&gt;

&lt;h3 id=&#34;parsedate-date&#34;&gt;&lt;code&gt;parseDate(date)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Parses a date string or a timestamp, and returns a Date.&lt;/p&gt;

&lt;h3 id=&#34;redraw&#34;&gt;&lt;code&gt;redraw()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Redraws the calendar. Shouldn&amp;rsquo;t be necessary in most cases.&lt;/p&gt;

&lt;h3 id=&#34;set-option-value&#34;&gt;&lt;code&gt;set(option, value)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sets a config option &lt;code&gt;option&lt;/code&gt;to &lt;code&gt;value&lt;/code&gt;, redrawing the calendar and updating the current view, if necessary.&lt;/p&gt;

&lt;h3 id=&#34;setdate-date-triggerchange&#34;&gt;&lt;code&gt;setDate(date, triggerChange)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sets the current selected date(s) to&lt;code&gt;date&lt;/code&gt;, which can be a date string, a Date, or an&lt;code&gt;Array&lt;/code&gt; of the Dates.&lt;/p&gt;

&lt;p&gt;Optionally, pass true as the second argument to force any onChange events to fire.&lt;/p&gt;

&lt;h3 id=&#34;toggle&#34;&gt;&lt;code&gt;toggle()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Shows/opens the calendar if its closed, hides/closes it otherwise.&lt;/p&gt;

&lt;h2 id=&#34;elements&#34;&gt;Elements&lt;/h2&gt;

&lt;h3 id=&#34;input&#34;&gt;input&lt;/h3&gt;

&lt;p&gt;The text &lt;code&gt;input&lt;/code&gt; element associated with &lt;code&gt;flatpickr&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;calendarcontainer&#34;&gt;calendarContainer&lt;/h3&gt;

&lt;p&gt;Self-explanatory. This is the &lt;code&gt;div.flatpickr-calendar&lt;/code&gt; element.&lt;/p&gt;

&lt;h3 id=&#34;prevmonthnav&#34;&gt;prevMonthNav&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;left arrow&amp;rdquo; element responsible for decrementing the current month.&lt;/p&gt;

&lt;h3 id=&#34;nextmonthnav&#34;&gt;nextMonthNav&lt;/h3&gt;

&lt;p&gt;The &amp;ldquo;right arrow&amp;rdquo; element responsible for incrementing the current month.&lt;/p&gt;

&lt;h3 id=&#34;currentmonthelement&#34;&gt;currentMonthElement&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;span&lt;/code&gt; holding the current month&amp;rsquo;s name.&lt;/p&gt;

&lt;h3 id=&#34;currentyearelement&#34;&gt;currentYearElement&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; holding the current year.&lt;/p&gt;

&lt;h3 id=&#34;days&#34;&gt;days&lt;/h3&gt;

&lt;p&gt;The container for all the day elements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Events &amp; Hooks</title>
      <link>https://chmln.github.io/flatpickr/events/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/events/</guid>
      <description>

&lt;h2 id=&#34;events&#34;&gt;Events&lt;/h2&gt;

&lt;p&gt;Flatpickr has 5 event hooks for the most common and useful actions. For each hook, you may specify a single function, or an array of functions. Callback arguments are explained below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;selectedDates&lt;/code&gt; is an array of Date objects selected by the user. When there are no dates selected, the array is empty.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dateStr&lt;/code&gt; is a string representation of the latest selected Date object by the user. The string is formatted as per the&lt;code&gt;dateFormat&lt;/code&gt;option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;instance&lt;/code&gt; is the Flatpickr object, containing various methods and properties.&lt;/p&gt;

&lt;h2 id=&#34;hooks&#34;&gt;Hooks&lt;/h2&gt;

&lt;h3 id=&#34;onchange&#34;&gt;&lt;code&gt;onChange&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onChange gets triggered when the user selects a date, or changes the time on a selected date.&lt;/p&gt;

&lt;h3 id=&#34;onopen&#34;&gt;&lt;code&gt;onOpen&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onOpen gets triggered when the calendar is opened.&lt;/p&gt;

&lt;h3 id=&#34;onclose&#34;&gt;&lt;code&gt;onClose&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onClose gets triggered when the calendar is closed.&lt;/p&gt;

&lt;h3 id=&#34;onmonthchange&#34;&gt;&lt;code&gt;onMonthChange&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onMonthChange gets triggered when the month is changed, either by the user or programmatically.&lt;/p&gt;

&lt;h3 id=&#34;onyearchange&#34;&gt;&lt;code&gt;onYearChange&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onMonthChange gets triggered when the year is changed, either by the user or programmatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
{
    onChange: function(selectedDates, dateStr, instance) {
        //...
    },
    onOpen: [
        function(selectedDates, dateStr, instance){
            //...
        },
        function(selectedDates, dateStr, instance){
            //...
        }
    ],
    onClose: function(selectedDates, dateStr, instance){
       // ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;onready&#34;&gt;&lt;code&gt;onReady&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onReady gets triggered once the calendar is in a ready state.&lt;/p&gt;

&lt;h3 id=&#34;onvalueupdate&#34;&gt;&lt;code&gt;onValueUpdate&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;onValueUpdate gets triggered when the input value is updated with a new date string.&lt;/p&gt;

&lt;h3 id=&#34;ondaycreate&#34;&gt;&lt;code&gt;onDayCreate&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Take full control of every date cell with the&lt;code&gt;onDayCreate()&lt;/code&gt;hook.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    onDayCreate: function(dObj, dStr, fp, dayElem){
        // Utilize dayElem.dateObj, which is the corresponding Date

        // dummy logic
        if (Math.random() &amp;lt; 0.15)
            dayElem.innerHTML += &amp;quot;&amp;lt;span class=&#39;event&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;;

        else if (Math.random() &amp;gt; 0.85)
            dayElem.innerHTML += &amp;quot;&amp;lt;span class=&#39;event busy&#39;&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every flatpickr day has &lt;code&gt;relative&lt;/code&gt; positioning, which makes it easier to position indicators as we&amp;rsquo;d like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.event {
    position: absolute;
    width: 3px;
    height: 3px;
    border-radius: 150px;
    bottom: 3px;
    left: calc(50% - 1.5px);
    content: &amp;quot; &amp;quot;;
    display: block;
    background: #3d8eb9;
}

.event.busy {
    background: #f64747;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;style&gt;
.event {
    position: absolute;
    width: 3px;
    height: 3px;
    border-radius: 150px;
    bottom: 3px;
    left: calc(50% - 1.5px);
    content: &#34; &#34;;
    display: block;
    background: #3d8eb9;
}

.event.busy {
    background: #f64747;
}
&lt;/style&gt;

&lt;p&gt;&lt;input data-id=&#34;onDayCreate&#34; type=&#34;text&#34; placeholder=&#34;Select date&#34; class=&#34;flatpickr&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>https://chmln.github.io/flatpickr/options/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/options/</guid>
      <description>&lt;table class=&#34;options&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Config Option&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;Default&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;altFormat&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
            &lt;td&gt;&#34;F j, Y&#34;&lt;/td&gt;
            &lt;td&gt;Exactly the same as date format, but for the altInput field&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;altInput&lt;/td&gt;
            &lt;td&gt;Boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Show the user a readable date (as per altFormat), but return something totally different to the server.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;altInputClass&lt;/td&gt;
            &lt;td&gt;String&lt;/td&gt;
            &lt;td&gt;&#34;&#34;&lt;/td&gt;
            &lt;td&gt;This class will be added to the input element created by the altInput option. &amp;nbsp;Note that&amp;nbsp;&lt;code&gt;altInput&lt;/code&gt;&amp;nbsp;already inherits classes from the original input.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;allowInput&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Allows the user to enter a date directly input the input field. By default, direct entry is disabled.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;appendTo&lt;/td&gt;
            &lt;td&gt;HTMLElement&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;Instead of&amp;nbsp;&lt;code&gt;body&lt;/code&gt;, appends the calendar to the specified node instead.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;clickOpens&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;true&lt;/td&gt;
            &lt;td&gt;Whether clicking on the input should open the picker. You could disable this if you wish to open the calendar manually with&lt;code&gt;.open()&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;dateFormat&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
            &lt;td&gt;&#34;Y-m-d&#34;&lt;/td&gt;
            &lt;td&gt;A string of characters which are used to define how the date will be displayed in the input box. The supported characters are defined in the table below.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;defaultDate&lt;/td&gt;
            &lt;td&gt;string/Date&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;Set the initial selected date. Same as preloading a date string into an input&#39;s value attribute, but can also handle a Date object.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;disable&lt;/td&gt;
            &lt;td&gt;array&lt;/td&gt;
            &lt;td&gt;[]&lt;/td&gt;
            &lt;td&gt;
                See&amp;nbsp;&lt;a href=&#34;#disable&#34;&gt;Disabling dates&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;disableMobile&lt;/td&gt;
            &lt;td&gt;Boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Set&amp;nbsp;&lt;code&gt;disableMobile&lt;/code&gt;&amp;nbsp;to true to always use the non-native picker.&lt;br&gt;
            By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;enable&lt;/td&gt;
            &lt;td&gt;array&lt;/td&gt;
            &lt;td&gt;[]&lt;/td&gt;
            &lt;td&gt;
                See&amp;nbsp;&lt;a href=&#34;#enable&#34;&gt;Enabling dates&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;enableTime&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Enables time picker&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;enableSeconds&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Enables seconds in the time picker.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;hourIncrement&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
            &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;Adjusts the step for the hour input (incl. scrolling)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;inline&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Displays the calendar inline&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;maxDate&lt;/td&gt;
            &lt;td&gt;String/Date&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;The maximum date that a user can pick to (inclusive).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;minDate&lt;/td&gt;
            &lt;td&gt;String/Date&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;The minimum date that a user can start picking from (inclusive).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;minuteIncrement&lt;/td&gt;
            &lt;td&gt;integer&lt;/td&gt;
            &lt;td&gt;5&lt;/td&gt;
            &lt;td&gt;Adjusts the step for the minute input (incl. scrolling)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;mode&lt;/td&gt;
            &lt;td&gt;String&lt;/td&gt;
            &lt;td&gt;&#34;single&#34;&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&#34;single&#34;&lt;/code&gt;,&amp;nbsp;&lt;code&gt;&#34;multiple&#34;&lt;/code&gt;, or&amp;nbsp;&lt;code&gt;&#34;range&#34;&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;nextArrow&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;HTML for the arrow icon, used to switch months.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;noCalendar&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Hides the day selection in calendar.&lt;br&gt;
            Use it along with&amp;nbsp;&lt;code&gt;enableTime&lt;/code&gt;&amp;nbsp;to create a time picker.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;onChange&lt;/td&gt;
            &lt;td&gt;function, [functions]&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;
                Function(s) to trigger on every date selection. See&amp;nbsp;&lt;a href=&#34;#eventsAPI&#34;&gt;Events API&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;onClose&lt;/td&gt;
            &lt;td&gt;function, [functions]&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;
                Function(s) to trigger on every time the calendar is closed. See&amp;nbsp;&lt;a href=&#34;#eventsAPI&#34;&gt;Events API&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;onOpen&lt;/td&gt;
            &lt;td&gt;function, [functions]&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;
                Function(s) to trigger on every time the calendar is opened. See&amp;nbsp;&lt;a href=&#34;#eventsAPI&#34;&gt;Events API&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;onReady&lt;/td&gt;
            &lt;td&gt;function, [functions]&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
            &lt;td&gt;
                Function to trigger when the calendar is ready. See&amp;nbsp;&lt;a href=&#34;#eventsAPI&#34;&gt;Events API&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;parseDate&lt;/td&gt;
            &lt;td&gt;function&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Function that expects a date string and must return a Date object&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;prevArrow&lt;/td&gt;
            &lt;td&gt;string&lt;/td&gt;
            &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;HTML for the left arrow icon.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;shorthandCurrentMonth&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Show the month using the shorthand version (ie, Sep instead of September).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;static&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Position the calendar inside the wrapper and next to the input element. (Leave&lt;code&gt;false&lt;/code&gt;unless you know what you&#39;re doing.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;time_24hr&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Displays time picker in 24 hour mode without AM/PM selection when enabled.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;utc&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;When true, dates will parsed, formatted, and displayed in UTC. It&#39;s recommended that date strings contain the timezone, but not necessary.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;weekNumbers&lt;/td&gt;
            &lt;td&gt;boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;Enables display of week numbers in calendar.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;wrap&lt;/td&gt;
            &lt;td&gt;Boolean&lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
            &lt;td&gt;
                &lt;a href=&#34;https://chmln.github.io/flatpickr/#example-strap&#34;&gt;Custom elements and input groups&lt;/a&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Formatting Tokens</title>
      <link>https://chmln.github.io/flatpickr/formatting/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/formatting/</guid>
      <description>

&lt;p&gt;Each character in the table below can be used in &lt;code&gt;dateFormat&lt;/code&gt; and &lt;code&gt;altFormat&lt;/code&gt; options to achieve the format you need.&lt;/p&gt;

&lt;h2 id=&#34;date-formatting-tokens&#34;&gt;Date Formatting Tokens&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;Day of the month, 2 digits with leading zeros&lt;/td&gt;
&lt;td&gt;01 to 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;A textual representation of a day&lt;/td&gt;
&lt;td&gt;Mon through Sun&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l (lowercase &#39;L&#39;)&lt;/td&gt;
&lt;td&gt;A full textual representation of the day of the week&lt;/td&gt;
&lt;td&gt;Sunday through Saturday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;Day of the month without leading zeros&lt;/td&gt;
&lt;td&gt;1 to 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;Day of the month without leading zeros and ordinal suffix&lt;/td&gt;
&lt;td&gt;1st, 2nd, to 31st&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;Numeric representation of the day of the week&lt;/td&gt;
&lt;td&gt;0 (for Sunday) through 6 (for Saturday)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;A full textual representation of a month&lt;/td&gt;
&lt;td&gt;January through December&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;Numeric representation of a month, with leading zero&lt;/td&gt;
&lt;td&gt;01 through 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Numeric representation of a month, without leading zeros&lt;/td&gt;
&lt;td&gt;1 through 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;A short textual representation of a month&lt;/td&gt;
&lt;td&gt;Jan through Dec&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;The number of seconds since the Unix Epoch&lt;/td&gt;
&lt;td&gt;1413704993&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;y&lt;/td&gt;
&lt;td&gt;A two digit representation of a year&lt;/td&gt;
&lt;td&gt;99 or 03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;A full numeric representation of a year, 4 digits&lt;/td&gt;
&lt;td&gt;1999 or 2003&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;time-formatting-tokens&#34;&gt;Time Formatting Tokens&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;Hours (24 hours)&lt;/td&gt;
&lt;td&gt;00 to 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;Hours&lt;/td&gt;
&lt;td&gt;1 to 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Minutes&lt;/td&gt;
&lt;td&gt;00 to 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;Seconds, 2 digits&lt;/td&gt;
&lt;td&gt;00 to 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;Seconds&lt;/td&gt;
&lt;td&gt;0, 1 to 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;AM/PM&lt;/td&gt;
&lt;td&gt;AM or PM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Localization</title>
      <link>https://chmln.github.io/flatpickr/localization/</link>
      <pubDate>Fri, 03 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/localization/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/chmln/flatpickr/tree/master/dist/l10n&#34;&gt;Dozens of locales&lt;/a&gt; are available.&lt;/p&gt;

&lt;p&gt;Flatpickr can be localized per-instance, or globally.&lt;/p&gt;

&lt;h2 id=&#34;using-modules&#34;&gt;Using Modules&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Flatpickr = require(&amp;quot;flatpickr&amp;quot;);
const Russian = require(&amp;quot;flatpickr/dist/l10n/ru.js&amp;quot;).ru;
// or.. import {ru} from &amp;quot;flatpickr/dist/l10n/ru.js&amp;quot;

new Flatpickr(myElem, {
    &amp;quot;locale&amp;quot;: Russian // locale for this instance only
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Localize globally (for all instances):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Russian = require(&amp;quot;flatpickr/dist/l10n/ru.js&amp;quot;).ru;
Flatpickr.localize(Russian); // default locale is now Russian

new Flatpickr(myElem);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;localization-in-a-browser-environment&#34;&gt;Localization in a Browser Environment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://npmcdn.com/flatpickr/dist/flatpickr.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://npmcdn.com/flatpickr/dist/l10n/ru.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Flatpickr(myElement, {
    &amp;quot;locale&amp;quot;: &amp;quot;ru&amp;quot;  // locale for this instance only
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Localize globally (for all instances):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Flatpickr.localize(Flatpickr.l10ns.ru);
flatpickr(&amp;quot;mySelector&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may also wish to modify only certain values of locale.
For instance, to set the first day of the week to Monday:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Flatpickr.l10ns.default.firstDayOfWeek = 1; // Monday
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;d like the option to persist regardless of locale, use the &lt;code&gt;locale&lt;/code&gt; option to override specific fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Flatpickr(myElem, {
    locale: {
        firstDayOfWeek: 2
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Plugins</title>
      <link>https://chmln.github.io/flatpickr/plugins/</link>
      <pubDate>Sat, 25 Mar 2017 20:23:43 -0500</pubDate>
      
      <guid>https://chmln.github.io/flatpickr/plugins/</guid>
      <description>

&lt;p&gt;Plugins are in essentially a set of &lt;a href=&#34;https://chmln.github.io/flatpickr/events-hooks&#34;&gt;hooks&lt;/a&gt;, that receive a config object (optionally) and a &lt;a href=&#34;https://chmln.github.io/flatpickr/instance-methods-properties-elements/&#34;&gt;flatpickr instance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functionality requested by users that doesn&amp;rsquo;t make it to core usually ends up in a plugin. The &lt;code&gt;flatpickr&lt;/code&gt; repo comes with a few &lt;a href=&#34;https://github.com/chmln/flatpickr/tree/master/dist/plugins&#34;&gt;plugins&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;confirmdate&#34;&gt;&lt;code&gt;confirmDate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Provides a visual cue for users after selecting either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date + time&lt;/li&gt;
&lt;li&gt;multiple dates&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    &amp;quot;enableTime&amp;quot;: true,
    &amp;quot;plugins&amp;quot;: [new confirmDatePlugin({})]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;confirmDate&#34;&gt;&lt;/p&gt;

&lt;p&gt;A spiffy SVG icon is included, along with sane defaults, but you can customize them.&lt;/p&gt;

&lt;p&gt;Here are all the available options:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
    confirmIcon: &amp;quot;&amp;lt;i class=&#39;fa fa-check&#39;&amp;gt;&amp;lt;/i&amp;gt;&amp;quot;, // your icon&#39;s html, if you wish to override
    confirmText: &amp;quot;OK &amp;quot;,
    showAlways: false,
    theme: &amp;quot;light&amp;quot; // or &amp;quot;dark&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;weekselect&#34;&gt;&lt;code&gt;weekSelect&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;For selecting a week.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Flatpickr({
    &amp;quot;plugins&amp;quot;: [new weekSelectPlugin({})],
    &amp;quot;onChange&amp;quot;: [function(){
        // extract the week number
        // note: &amp;quot;this&amp;quot; is bound to the flatpickr instance
        const weekNumber = this.selectedDates[0]
            ? this.config.getWeek(this.selectedDates[0])
            : null;

        console.log(weekNumber);
    }]
});


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;input class=flatpickr type=&#34;text&#34; placeholder=&#34;Select Date..&#34; data-id=&#34;weekSelect&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>